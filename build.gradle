plugins {
    id 'com.palantir.git-version' version '3.0.0'
    id 'org.jetbrains.kotlin.jvm' version '1.9.0'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.0'
    id 'org.sonarqube' version '4.2.0.3129'
    id 'jacoco'
}

group 'net.transgressoft'
version gitVersion()

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
}

kotlin {
    jvmToolchain(11)
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile){
        options.compilerArgs << "-Xlint:unchecked"
    }
}

subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'maven-publish'
    apply plugin: 'org.sonarqube'

    ext {
        kotlinVersion = '1.9.0'

        // the password needs to be specified via command line
        repoPass = project.hasProperty('repoPass') ? project.getProperty('repoPass') : ''
    }

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    dependencies {
        implementation 'com.neovisionaries:nv-i18n:1.29'
        implementation 'io.github.microutils:kotlin-logging-jvm:3.0.5'
        implementation 'net.transgressoft:soft-query-api:0.65-SNAPSHOT'
        implementation platform('org.jetbrains.kotlin:kotlin-bom')
        implementation "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

        testImplementation 'ch.qos.logback:logback-core:1.4.8'
        testRuntimeOnly 'ch.qos.logback:logback-classic:1.4.8'
    }

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            name 'transgressoft-snapshots'
            url 'http://10.8.0.1:8081/repository/maven-snapshots/'
            allowInsecureProtocol = true
        }
    }

    configurations.all {
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
        }
    }

    plugins.withType(JacocoPlugin) {
        tasks['test'].finalizedBy 'jacocoTestReport'
    }

    jacocoTestReport {
        reports {
            xml.required.set true
        }
    }

    sonar {
        properties {
            property "sonar.sources", "src"
            property "sonar.exclusions", "**/test/**"
        }

        tasks.withType(Test).configureEach {
            useJUnitPlatform()
        }
    }

    task sourceJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
        from sourceSets.main.output
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier 'javadoc'
        from javadoc.destinationDir
        javadoc.options.addStringOption('Xdoclint:none', '-quiet')
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_11
            freeCompilerArgs += '-Xjvm-default=all'
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_11
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            events 'passed', 'skipped', 'failed'
        }
    }
}

project('music-commons-core') {

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    configurations {
        spi
    }

    task spiJar(type: Jar) {
        archiveBaseName = 'music-commons-core-spi'
        from sourceSets.main.output
        include('com/transgressoft/music/**')
    }

    artifacts {
        spi spiJar
    }

    dependencies {
        api project(path: ':music-commons-api')
    }
}
import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile
import org.jlleitschuh.gradle.ktlint.reporter.ReporterType

plugins {
    id 'jacoco-report-aggregation'
    id 'maven-publish'
    id 'org.jetbrains.dokka' version '1.9.20'
    id 'org.jetbrains.kotlin.jvm' version '2.1.10'
    id 'org.jetbrains.kotlin.plugin.serialization' version '2.1.10' apply false
    id 'org.jlleitschuh.gradle.ktlint' version '12.2.0'
    id 'org.sonarqube' version '6.0.1.5171'
    id 'pl.allegro.tech.build.axion-release' version '1.18.17'
}

repositories {
    mavenCentral()
}

ext {
    kotlinVersion = '2.1.10'
    coroutinesVersion = '1.10.1'
    kotestVersion = '5.9.1'
}

dependencies {
    implementation project(':music-commons-api')
    implementation project(':music-commons-core')
    implementation project(':music-commons-fx')
    implementation project(':music-commons-test')
    api "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
}

kotlin {
    jvmToolchain(17)
}

tasks.named('jar').configure {
    enabled = false
}

scmVersion {
    tag {
        prefix = ''
        initialVersion { t, p -> '1.0.0' }
    }
    useHighestVersion = true
    ignoreUncommittedChanges = false
    versionIncrementer 'incrementMinor'
}

version = scmVersion.version

sonar {
    properties {
        property 'sonar.host.url', 'http://sonar.transgressoft.net'
        property 'sonar.organization', 'transgressoft'
        property 'sonar.projectKey', 'net.transgressoft:music-commons'
        property 'sonar.projectName', 'music-commons'
        property 'sonar.projectVersion', version
        property 'sonar.junit.reportPaths', 'build/test-results/test'
        property 'sonar.inclusions', ['**/music-commons-api/src/main/**', '**/music-commons-core/src/main/**', '**/music-commons-fx/src/main/**']
        property 'sonar.test.exclusions', '**/test/**'
        def buildDir = project.layout.buildDirectory.get().asFile.absolutePath
        property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml"
    }
}

tasks.named('check') {
    dependsOn tasks.named('testCodeCoverageReport', JacocoReport)
}

subprojects {

    apply plugin: 'jacoco'
    apply plugin: 'kotlin'
    apply plugin: 'maven-publish'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'org.jetbrains.kotlin.plugin.serialization'
    apply plugin: 'org.jlleitschuh.gradle.ktlint'
    apply plugin: 'org.sonarqube'

    group = 'net.transgressoft'
    project.version = rootProject.version

    dependencies {
        implementation platform("org.jetbrains.kotlin:kotlin-bom:$kotlinVersion")
        api platform("org.jetbrains.kotlinx:kotlinx-coroutines-bom:$coroutinesVersion")
        api "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

        implementation 'com.neovisionaries:nv-i18n:1.29'
        implementation 'io.github.microutils:kotlin-logging-jvm:3.0.5'
        implementation 'net.transgressoft:transgressoft-commons-api:1.4.0-SNAPSHOT'
        implementation "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.8.0'

        testImplementation 'ch.qos.logback:logback-core:1.5.16'
        testRuntimeOnly 'ch.qos.logback:logback-classic:1.5.16'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url = 'https://jitpack.io' }
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }

    tasks.named("publish").configure {
        shouldRunAfter("build", "check")
    }

    tasks.withType(KotlinJvmCompile).configureEach {
        compilerOptions {
            jvmTarget.set(JvmTarget.JVM_17)
            freeCompilerArgs.add('-Xjsr305=strict')
        }
    }

    configurations.configureEach {
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
        }
    }

    sonar {
        properties {
            property 'sonar.moduleKey', "${project.name}"
        }
    }

    ktlint {
        reporters {
            reporter(ReporterType.HTML)
        }
    }

    test {
        useJUnitPlatform()
        jvmArgs = [
                '--add-opens=javafx.base/javafx.beans=ALL-UNNAMED',
                '--add-opens=javafx.base/javafx.beans.property=ALL-UNNAMED',
                '--add-opens=javafx.base/javafx.collections=ALL-UNNAMED',
                '--add-opens=javafx.graphics/javafx.scene.image=ALL-UNNAMED',
                '--add-opens=javafx.graphics/com.sun.javafx.application=ALL-UNNAMED'
        ]
        testLogging {
            events 'passed', 'skipped', 'failed'
        }
    }

    jacocoTestReport {
        reports {
            xml.required.set true
            html.required = true
        }
    }

    tasks.named('javadocJar') {
        dependsOn tasks.named('dokkaJavadoc')
        from tasks.named('dokkaJavadoc').map { it.outputDirectory }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
                groupId = project.group
                artifactId = project.name
                version = project.version

                pom {
                    name = project.name
                    description = project.description
                    url = 'https://github.com/octaviospain/music-commons'
                    licenses {
                        license {
                            name = 'GNU General Public License v3'
                            url = 'https://www.gnu.org/licenses/gpl-3.0.en.html'
                        }
                    }

                    developers {
                        developer {
                            id = 'transgressoft'
                            name = 'Octavio Calleya Garcia'
                            email = 'octaviospain@gmail.com'
                        }
                    }
                }
            }
        }
    }
}

plugins {
    id 'com.palantir.git-version' version '3.1.0'
    id 'org.jetbrains.kotlin.jvm' version '1.9.0'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.0'
    id 'org.sonarqube' version '5.0.0.4638'
    id 'jacoco'
}

group 'net.transgressoft'
version gitVersion()

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
}

kotlin {
    jvmToolchain(17)
}

subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'maven-publish'
    apply plugin: 'org.sonarqube'

    ext {
        kotlinVersion = '1.9.0'

        // the password needs to be specified via command line
        repoPass = project.hasProperty('repoPass') ? project.getProperty('repoPass') : ''
    }

    dependencies {
        implementation 'com.neovisionaries:nv-i18n:1.29'
        implementation 'io.github.microutils:kotlin-logging-jvm:3.0.5'
        implementation 'net.transgressoft:transgressoft-commons-api:1.32'
        implementation platform('org.jetbrains.kotlin:kotlin-bom')
        implementation "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

        testImplementation 'ch.qos.logback:logback-core:1.5.6'
        testRuntimeOnly 'ch.qos.logback:logback-classic:1.5.6'
    }

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            name 'transgressoft-public'
            url 'http://nexus.transgressoft.net/repository/maven-public/'
            allowInsecureProtocol = true
        }
    }

    configurations.all {
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
        }
    }

    plugins.withType(JacocoPlugin) {
        tasks['test'].finalizedBy 'jacocoTestReport'
    }

    jacocoTestReport {
        reports {
            xml.required.set true
        }
    }

    sonar {
        properties {
            property "sonar.sources", "src"
            property "sonar.exclusions", "**/test/**"
        }

        tasks.withType(Test).configureEach {
            useJUnitPlatform()
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            events 'passed', 'skipped', 'failed'
        }
    }
}
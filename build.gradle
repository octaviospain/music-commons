import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile

plugins {
    id 'com.palantir.git-version' version '3.1.0' apply false
    id 'org.jetbrains.kotlin.jvm' version '2.0.10'
    id 'org.jetbrains.kotlin.plugin.serialization' version '2.0.10' apply false
    id 'org.sonarqube' version '5.1.0.4882' apply false
    id 'jacoco'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
}

kotlin {
    jvmToolchain(17)
}

tasks.named('jar').configure {
    enabled = false
}

ext {
    kotlinVersion = '2.0.10'
    kotestVersion = '5.9.1'
}

subprojects {

    apply plugin: 'com.palantir.git-version'
    apply plugin: 'kotlin'
    apply plugin: 'maven-publish'
    apply plugin: 'org.sonarqube'
    apply plugin: 'org.jetbrains.kotlin.plugin.serialization'

    group 'net.transgressoft'
    version gitVersion()

    dependencies {
        implementation 'com.neovisionaries:nv-i18n:1.29'
        implementation 'io.github.microutils:kotlin-logging-jvm:3.0.5'
        implementation 'net.transgressoft:transgressoft-commons-api:1.47'
        implementation platform('org.jetbrains.kotlin:kotlin-bom')
        implementation "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

        testImplementation 'ch.qos.logback:logback-core:1.5.6'
        testRuntimeOnly 'ch.qos.logback:logback-classic:1.5.6'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    java {
        withSourcesJar()
    }

    tasks.named("publish").configure {
        shouldRunAfter("build", "check")
    }

    tasks.withType(KotlinJvmCompile).configureEach {
        compilerOptions {
            jvmTarget.set(JvmTarget.JVM_17)
            freeCompilerArgs.add('-Xjsr305=strict')
        }
    }

    configurations.configureEach {
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
        }
    }

    plugins.withType(JacocoPlugin).configureEach {
        tasks.named('test').configure {
            finalizedBy 'jacocoTestReport'
        }
    }

    jacocoTestReport {
        reports {
            xml.required.set true
        }
    }

    sonar {
        properties {
            property "sonar.sources", "src"
            property "sonar.exclusions", "**/test/**"
        }

        tasks.withType(Test).configureEach {
            useJUnitPlatform()
        }
    }

    test {
        useJUnitPlatform()
        jvmArgs('--add-opens=javafx.graphics/com.sun.javafx.application=ALL-UNNAMED')
        testLogging {
            events 'passed', 'skipped', 'failed'
        }
    }

    publishing {
        publications {
            register('nexus', MavenPublication) {
                groupId = project.group
                artifactId = project.name
                version = project.version

                from components.java


                pom {
                    name = project.name
                    description = project.description
                    licenses {
                        license {
                            name = 'GNU General Public License v3'
                            url = 'https://www.gnu.org/licenses/gpl-3.0.en.html'
                        }
                    }
                    developers {
                        developer {
                            id = 'octaviospain'
                            name = 'Octavio Calleya Garc√≠a'
                            email = 'octaviospain@gmail.com'
                        }
                    }
                }
            }
        }
    }
}

